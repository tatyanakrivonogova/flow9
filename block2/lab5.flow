import string;
import lingo/pegcode/driver;
import lingo/lab5/mygrammar;

lingoGrammarOp : ref Maybe<[PegOp]> = ref None();

lingoGrammar() {
	onlyOnce(lingoGrammarOp, \ -> {
        mode = getUrlParameter("mode");
        if (mode == "rpn") {
            compilePegGrammar("#include lingo/lab5/my_rpn_lingo.lingo");
        } else {
            compilePegGrammar("#include lingo/lab5/mylingo.lingo");
        }
	});
}

strToAst(str: string) -> Expr {
    parsic(lingoGrammar(), str, defaultPegActions);
}

astToStr(e: Expr) -> string {
    switch(e) {
		Int(d) : {
			i2s(d);
		}
        Var(v) : {
            v;
        }
		Mul(l, r) : {
			"(" + astToStr(l) + " * " + astToStr(r) + ")";
		}
		Add(l, r) : {
			"(" + astToStr(l) + " + " + astToStr(r) + ")";
		}
        Sub(l, r) : {
            "(" + astToStr(l) + " - " + astToStr(r) + ")";
        }
        Div(l, r) : {
            "(" + astToStr(l) + " / " + astToStr(r) + ")";
        }
        Neg(ex) : {
            "-" + astToStr(ex);
        }
        Pow(l, r) : {
            "(" + astToStr(l) + " ^ " + astToStr(r) + ")";
        }
	}
}

calculate(e : Expr, vars: Tree<string, int>) -> double {
	switch(e) {
        Var(x) : {
			switch(lookupTree(vars, x)) {
				Some(val): i2d(val);
				None(): 0.0;
			}
		}
		Int(d) : {
			i2d(d);
		}
		Mul(l, r) : {
			calculate(l, vars) * calculate(r, vars);
		}
		Add(l, r) : {
			calculate(l, vars) + calculate(r, vars);
		}
        Sub(l, r) : {
            calculate(l, vars) - calculate(r, vars);
        }
        Div(l, r) : {
            calculate(l, vars) / calculate(r, vars);
        }
        Neg(ex) : {
            -calculate(ex, vars);
        }
        Pow(l, r) : {
            dpow(calculate(l, vars), calculate(r, vars));
        }
	}
}

astToRpn(e: Expr) -> string {
    switch(e) {
		Int(d) : {
			i2s(d);
		}
        Var(v) : {
            v + " ";
        }
		Mul(l, r) : {
			"(" + astToRpn(l) + " " + astToRpn(r) + " " + "*" + ")";
		}
		Add(l, r) : {
			"(" + astToRpn(l) + " " + astToRpn(r) + " " + "+" + ")";
		}
        Sub(l, r) : {
            "(" + astToRpn(l) + " " + astToRpn(r) + " " + "-" + ")";
        }
        Div(l, r) : {
            "(" + astToRpn(l) + " " + astToRpn(r) + " " + "/" + ")";
        }
        Neg(ex) : {
            "(" + "0 " + astToRpn(ex) + " " + "-" + ")";
        }
        Pow(l, r) : {
            "(" + astToRpn(l) + " " + astToRpn(r) + " " + "^" + ")";
        }
	}
}

differentiation(e : Expr, var : string) -> Expr {
    switch(e) {
        Int(d) : Int(0);
        Var(v) : if (v == var) Int(1) else Int(0);
        Add(l, r) : Add(differentiation(l, var), differentiation(r, var));
        Mul(l, r) : Add(Mul(differentiation(l, var), r), Mul(l, differentiation(r, var)));
        Sub(l, r) : Sub(differentiation(l, var), differentiation(r, var));
        Div(l, r) : Div(Sub(Mul(differentiation(l, var), r), Mul(l, differentiation(r, var))), Pow(r, Int(2)));
        Pow(l, r) : Mul(Mul(r, Pow(l, Sub(r, Int(1)))), differentiation(l, var));
        Neg(ex) : Sub(Int(0), differentiation(ex, var));
    }
}

getExprArgs(e : Expr) -> [Expr] {
        switch (e) {
            Var(v): [Var(v)];
            Int(i): [Int(i)];
            Add(l, r): [l, r];
            Sub(l, r): [l, r];
            Mul(l, r): [l, r];
            Div(l, r): [l, r];
            Pow(l, r): [l, r];
            Neg(ex): [ex];
        }
}

getExprType(e : Expr) -> string {
        switch (e) {
            Var(v): "var";
            Int(i): "int";
            Add(l, r): "+";
            Sub(l, r): "-";
            Mul(l, r): "*";
            Div(l, r): "/";
            Pow(l, r): "^";
            Neg(ex): "neg";
        }
}

argToInt(e: Expr) -> int {
    switch(e) {
        Int(d): d;
        default: 0;
    }
}

getVarName(e: Expr) -> string {
    switch(e: Expr) {
        Var(v): v;
        Pow(l, r): getVarName(l);
        default: "";
    }
    
}


simplify(e: Expr) -> Expr {
    switch(e) {
        Add(l, r) : {
            l1 = simplify(l);
            r1 = simplify(r);

            if (l1 == Int(0)) {
                r1;
            } 
            else if (r1 == Int(0)) {
                l1;
            } else if (getExprType(l1) == "var" && getExprType(r1) == "var" && getExprArgs(l1) == getExprArgs(r1)) {
                Mul(Int(2), l1);
            }
            else Add(l1, r1);
        }
        Sub(l, r) : {
            l1 = simplify(l);
            r1 = simplify(r);

            if (r1 == Int(0)) {
                l1;
            }
            else if (l1 == Int(0)) {
                Neg(r1);
            }
            else if (l1 == r1) {
                Int(0);
            } 
            else Sub(l1, r1);
        }
        Mul(l, r) : {
            l1 = simplify(l);
            r1 = simplify(r);

            if (l1 == Int(0) || r1 == Int(0)) {
                Int(0);
            } 
            else if (l1 == Int(1)) {
                r1;
            }
            else if (r1 == Int(1)) {
                l1;
            }
            else if (l1 == Int(-1)) {
                Neg(r1);
            }
            else if (r1 == Int(-1)) {
                Neg(l1);
            }
            else if (l1 == r1) {
                Pow(l1, Int(2));
            }
            else if (getExprType(l1) == "^" && getExprType(r1) == "var" && getVarName(l1) == getVarName(r1)) {
                simplify(Pow(r1, Int(argToInt(getExprArgs(l1)[1])+1)));
            }
            else if (getExprType(l1) == "var" && getExprType(r1) == "^" && getVarName(l1) == getVarName(r1)) {
                simplify(Pow(l1, Int(argToInt(getExprArgs(r1)[1])+1)));
            }
            else if (getExprType(l1) == "^" && getExprType(r1) == "^" && getVarName(l1) == getVarName(r1)) {
                simplify(Pow(getExprArgs(l1)[0], Int(argToInt(getExprArgs(l1)[1])+argToInt(getExprArgs(r1)[1]))));
            }
            else Mul(l1, r1);
        }
        Div(l, r) : {
            l1 = simplify(l);
            r1 = simplify(r);

            if (l1 == Int(0)) {
                Int(0);
            }
            else if (r1 == Int(1)) {
                l1;
            }
            else if (l1 == r1) {
                Int(1);
            }
            else if (getExprType(l1) == "var" && getExprType(r1) == "^" && getVarName(l1) == getVarName(r1)) {
                if (argToInt(getExprArgs(r1)[1]) == 2) {
                    Div(Int(1), l1);
                } 
                else {
                    simplify(Div(Int(1), Pow(l1, Int(argToInt(getExprArgs(r1)[1])-1))));
                }
            }
            else if (getExprType(l1) == "^" && getExprType(r1) == "var" && getVarName(l1) == getVarName(r1)) {
                simplify(Pow(r1, Int(argToInt(getExprArgs(l1)[1])-1)));
            }
            else if (getExprType(l1) == "^" && getExprType(r1) == "^" && getVarName(l1) == getVarName(r1)) {
                if (argToInt(getExprArgs(l1)[1]) >= argToInt(getExprArgs(r1)[1])) {
                    simplify(Pow(getExprArgs(l1)[0], Int(argToInt(getExprArgs(l1)[1])-argToInt(getExprArgs(r1)[1]))));
                } else {
                    simplify(Div(Int(1), Pow(getExprArgs(l1)[0], Int(argToInt(getExprArgs(r1)[1])-argToInt(getExprArgs(l1)[1])))));
                }
                
            }
            else Div(l1, r1);
        }
        Pow(l, r) : {
            l1 = simplify(l);
            r1 = simplify(r);

            if (r1 == Int(0)) {
                Int(1);
            }
            else if (r1 == Int(1)) {
                l1;
            }
            else if (l1 == Int(0)) {
                Int(0);
            }
            else if (l1 == Int(1)) {
                Int(1);
            } 
            else if (getExprType(r1) == "neg") {
                Div(Int(1), Pow(getExprArgs(l1)[0], Int(argToInt(getExprArgs(r1)[0]))));
            }
            else Pow(l1, r1);
        }
        default : e
    }
}

toRatFunc(e : Expr) -> Div {
    switch(e) {
        Int(d) : Div(Int(d), Int(1));
        Var(v) : Div(Var(v), Int(1));
        Add(l, r) : {
            l1 = toRatFunc(l);
            r1 = toRatFunc(r);
            Div(Add(Mul(l1.l, r1.r), Mul(r1.l, l1.r)), Mul(l1.r, r1.r));
        }
        Sub(l, r) : {
            l1 = toRatFunc(l);
            r1 = toRatFunc(r);
            Div(Sub(Mul(l1.l, r1.r), Mul(r1.l, l1.r)), Mul(l1.r, r1.r));
        }
        Mul(l, r) : {
            l1 = toRatFunc(l);
            r1 = toRatFunc(r);
            Div(Mul(l1.l, r1.l), 
                Mul(l1.r, r1.r));
        }
        Div(l, r) : {
            l1 = toRatFunc(l);
            r1 = toRatFunc(r);
            Div(Mul(l1.l, r1.r), Mul(l1.r, r1.l));
        }       
        Neg(ex) : {
            ex1 = toRatFunc(ex);
            Div(Neg(ex1), Int(1));
        }
        Pow(l, r) : {
            Div(Pow(l, r), Int(1));
        }
    }
}


rpnToAst(str: string) -> Expr {
    parsic(lingoGrammar(), str, defaultPegActions);
}

main() {
// vars definition
    vars = setTreeValues(TreeEmpty(), [Pair("x", 4), Pair("y", 2), Pair("z", 8)]);

// big test for simple grammar, differentiation, simplifying and calculating with vars
    // str = "((y / x) - (z + 1))";
    // ast = strToAst(str);
	// println(ast);
    // println(astToStr(ast));

    // diff = differentiation(ast, "y");
    // println(astToStr(diff));
    // println(astToStr(simplify(diff)));

    // println(calculate(ast, vars));
    // println(calculate(diff, vars));


// test simplifying of polinoms
    //str = "(4 * (x / (x ^ 1)))";
    //str = "(x ^ -5)";
    //println(astToStr(simplify(strToAst(str))));

// test simplifying of arithmetic expression
    str = "(((3 ^ 1) - (2 * 0)) + (6 - 0))";
    println(astToStr(simplify(strToAst(str))));


// rational function test
    // exp = "((1 / x) + (2 / y))";
    // println(astToStr(simplify((toRatFunc(strToAst(exp))))));


// test converting to rpn
    // str = "(((11 - 3) / (2 ^ 3)) * (-(20 / 2) + 5))";
    // ast = strToAst(str);
    // println(astToRpn(ast));


// test rpn calculating
    // rpn = "(((11 3 -) (2 3 ^) /) ((0 (20 2 /) -) 5 +) *)";
    // ast1 = rpnToAst(rpn);
    // println(ast1);
    // println(astToStr(ast1));
    // println(astToStr(simplify(ast1)));
    // println(calculate(ast1, vars));

    quit(0);
}
